#!/bin/bash
#
#   Copyright 2018 Chrisdigity
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
############
# Formals ###
v="1.1";
a="Chrisdigity";
name="Mochi Balance";
desc="A Simple Script that shows the balance of your Mochimo address."
fullname="$name - Version $v by $a";
script="$(basename $0)";
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )";
#########
# Jars ###
f_bx="$HOME/mochi/bin/bx";
f_ledger="$HOME/mochi/bin/d/ledger.dat";
f_addr="$HOME/mochi/bin/maddr.dat";
check="";
hex="";
bal=0;
##########
# Funks ###
tlog () {
  printf "[$(date '+%Y/%m/%d %H:%M:%S')] $script: $1" >> "$DIR/log";
  if [ $(cat log | wc -l) -ge 5000 ]; then mv log log.bak; fi;
}
err ()  {
  printf "error -> $1\nExiting...\n";
  tlog "error -> $1\n";
  exit 1;
}
########
# Fly ###

while [ $# -gt 0 ]; do

  case "$1" in

    -b|--bx) # Set Block Explorer file
      shift;
      [ $# -gt 0 ] && f_bx=$1 || err "No Block Explorer Specified!";

      # Block Explorer file checks
      [ "${f_bx:0:1}" = "-" ] && err "Block Explorer Cannot begin with '-'";
      [ ! -f $f_bx ] && err "No such Block Exporer: $f_bx";
      ;;

    -l|--ledger) # Set Ledger file
      shift;
      [ $# -gt 0 ] && f_ledger=$1 || err "No Ledger Specified!";

      # Ledger file checks
      [ "${f_ledger:0:1}" = "-" ] && err "Ledger Cannot begin with '-'";
      [ ! -f $f_ledger ] && err "No such Ledger: $f_ledger";
      ;;

    -a|--address) # Set Address file
      shift;
      [ $# -gt 0 ] && f_addr=$1 || err "No Address File Specified!";

      # Address file checks
      [ "${f_addr:0:1}" = "-" ] && err "Address File Cannot begin with '-'";
      [ ! -f $f_addr ] && err "No such address file: $f_addr";
      ;;

    -h|--hex) # Set Hex Address
      shift;
      [ $# -gt 0 ] && hex=$1 || err "No Hex Address Specified!";

      # Hex Address checks
      [ "${hex:0:1}" = "-" ] && err "Hex Address Cannot begin with '-'";
      [ $((${#hex}%2)) -ne 0 ] && err "Hex Address must be an even number of characters";
      ;;

    *) # Usage
      printf "\n$fullname\n\n";
      printf "  $desc\n\n";

      printf "Requirements: CLI Block Explorer (bx), Ledger File (ledger.dat)\n";
      printf "               & either an Address File (maddr.dat) or Hex Address\n\n";

      printf "Usage: ./$script [options]          $name Script\n";
      printf "    Options:\n";
      printf "        (no option)              Show balance using defaults\n";
      printf "        -a, --address [file]     Set address file (maddr.dat)\n";
      printf "        -b, --bx [file]          Set block explorer (bx)\n";
      printf "        -l, --ledger [file]      Set ledger (ledger.dat)\n";
      printf "        -h, --hex [hex_addr]     The first part of any hex address\n";
      printf "                                  -must be an even number of characters\n";
      printf "                                  -recommended 8 characters minimum\n\n";
      exit 0
      ;;

  esac;
  shift;

done;

# Sanity Checks
[ -r "$f_ledger" ] || err "$f_ledger - Does Not Exist or Cannot Read";
    [ -r "$f_bx" ] || err "$f_bx - Does Not Exist or Cannot Read";
    [ -r $f_addr ] || [ "$hex" != "" ] || err "$f_addr - Does Not Exist or Cannot Read";
  [ ! -r $f_addr ] || [ $(du -b "$f_addr" | cut -f1) -eq 2208 ] || \
      err "Not a public address file: $f_addr";

# Obtain hex address, if necessary
if [ "$hex" = "" ]; then
  hex="$(xxd $f_addr | cut -d ' ' -f 2-9 | sed 's/ //g' | sed ':a;N;$!ba;s/\n//g')";
  hex="${hex:0:64}";
fi;

# Get balance from block explorer
while [ "$hex" != "" ]; do

  # Run hex address against block explorer
  check="$((echo f; echo $hex; echo q) | $f_bx -l $f_ledger | sed '1!G;h;$!d')";

  # If hex address isn't found, balance=0
  [[ "$check" =~ "Not found" ]] && break;

  # Find hex address balance
  while read -r line; do [[ "$line" =~ "Balance" ]] && break; done <<< "$check";

  # Store hexadecimal balance
  bal_hex=$(echo $line | cut -d "x" -f2 | cut -d "]" -f1);

  # Convert little -> big endian
  i=${#bal_hex}; while [ $i -gt -1 ]; do bal=$bal${bal_hex:$i:2}; i=$((i-2)); done;

  # Convert balance to decimal
  bal=$(bc <<< "scale=9; $(( 16#$bal ))/1000000000");

  break;
done;

# Display apparent balance
echo $bal;

exit 0;
